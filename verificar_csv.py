import csv

def depurar_csv(nombre_archivo):
    """
    Lee y procesa un archivo CSV en modo de depuraci√≥n (dry run).
    No se conecta a ninguna base de datos. En su lugar, simula las
    operaciones y muestra un informe final.

    Args:
        nombre_archivo (str): La ruta al archivo CSV que se va a procesar.
    """
    print("üöÄ Iniciando script en MODO DEPURACI√ìN (DRY RUN)...")
    print("   (No se realizar√°n cambios en la base de datos)\n")

    # --- Simulaci√≥n de la Base de Datos ---
    # Usamos un diccionario para simular la tabla 'Matriculas'
    # Formato: {'numero_matricula': id_simulado}
    matriculas_simuladas = {}
    
    # Usamos un diccionario inverso para buscar por ID f√°cilmente
    # Formato: {id_simulado: 'numero_matricula'}
    id_a_matricula = {}

    # Usamos un set para simular la tabla 'RelacionesMatriculas' y evitar duplicados
    # Formato: {(id_padre, id_hija)}
    relaciones_simuladas = set()
    
    # Un contador para simular los IDs autoincrementales de la base de datos
    siguiente_id = 1

    # --- Funci√≥n Auxiliar Simulada ---
    def obtener_o_crear_matricula_id_simulado(no_matricula):
        nonlocal siguiente_id
        if not no_matricula or not no_matricula.strip():
            return None
        
        no_matricula = no_matricula.strip()
        
        # Si la matr√≠cula ya existe en nuestra simulaci√≥n, devolvemos su ID
        if no_matricula in matriculas_simuladas:
            return matriculas_simuladas[no_matricula]
        # Si no existe, la "creamos" en nuestra simulaci√≥n
        else:
            id_actual = siguiente_id
            matriculas_simuladas[no_matricula] = id_actual
            id_a_matricula[id_actual] = no_matricula
            siguiente_id += 1
            print(f"   [+] Matr√≠cula nueva detectada: '{no_matricula}' (ID simulado: {id_actual})")
            return id_actual

    # --- L√≥gica Principal de Lectura ---
    try:
        with open(nombre_archivo, mode='r', encoding='utf-8') as archivo_csv:
            lector_csv = csv.reader(archivo_csv, delimiter=';')
            next(lector_csv, None)  # Saltamos el encabezado

            for fila in lector_csv:
                no_matricula_actual = fila[0]
                matriculas_padre_str = fila[2]
                matricula_hija_str = fila[3]

                id_actual = obtener_o_crear_matricula_id_simulado(no_matricula_actual)

                # Procesamos sus padres (relaci√≥n "hacia arriba")
                if matriculas_padre_str:
                    for no_padre in matriculas_padre_str.split(','):
                        id_padre = obtener_o_crear_matricula_id_simulado(no_padre)
                        if id_padre and id_actual:
                            relaciones_simuladas.add((id_padre, id_actual))

                # Procesamos su hija (relaci√≥n "hacia abajo")
                if matricula_hija_str:
                    id_hija = obtener_o_crear_matricula_id_simulado(matricula_hija_str)
                    if id_actual and id_hija:
                        relaciones_simuladas.add((id_actual, id_hija))

    except FileNotFoundError:
        print(f"‚ùå ERROR: No se pudo encontrar el archivo '{nombre_archivo}'.")
        return # Salimos de la funci√≥n si no hay archivo

    # --- Informe Final ---
    print("\n-------------------------------------------")
    print("‚úÖ AN√ÅLISIS COMPLETADO")
    print("-------------------------------------------")
    print(f"üìÑ Matr√≠culas √∫nicas que se crear√≠an: {len(matriculas_simuladas)}")
    print(f"üîó Relaciones √∫nicas que se crear√≠an: {len(relaciones_simuladas)}")
    print("-------------------------------------------\n")

    # Mostramos algunos ejemplos para verificaci√≥n
    print("üïµÔ∏è‚Äç‚ôÇÔ∏è MUESTRA DE DATOS PROCESADOS:\n")

    # Imprimir las primeras 10 matr√≠culas que se crear√≠an
    print("--- Primeras 10 Matr√≠culas ---")
    for i, (num, sim_id) in enumerate(matriculas_simuladas.items()):
        if i >= 10: break
        print(f"  - Matr√≠cula: '{num}' (tendr√≠a el ID: {sim_id})")

    # Imprimir las primeras 20 relaciones que se crear√≠an (en formato legible)
    print("\n--- Primeras 20 Relaciones (Padre -> Hija) ---")
    for i, (id_padre, id_hija) in enumerate(relaciones_simuladas):
        if i >= 20: break
        # Usamos el diccionario inverso para mostrar los n√∫meros originales
        num_padre = id_a_matricula.get(id_padre, "N/A")
        num_hija = id_a_matricula.get(id_hija, "N/A")
        print(f"  - Relaci√≥n: '{num_padre}' -> '{num_hija}'")
    
    print("\n\n‚ú® Revisi√≥n finalizada. Si los datos son correctos, puedes usar el script principal.")

# --- Zona de Ejecuci√≥n ---
# Simplemente llama a la funci√≥n con el nombre de tu archivo CSV
depurar_csv('matriculas_input.csv')